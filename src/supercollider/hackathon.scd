
// proxy space initialization
s.reboot;
p = ProxySpace.push(s.boot);
s.sendMsg(\b_allocRead, 10, "/Users/marnin/Desktop/hackathon/git/droneboard/resources/whisper_swedish.wav");

m = ProxyMixer(p);
p.fadeTime = 0.3;
s.meter;


(
// OSC responder for setting parameters
OSCdef(\params,
	{|msg|
		var msg2 = msg[1..];
		case
		{msg[1].asInteger == 0}{~tube.xset(\loss, msg[2].asFloat.linlin(0, 1, 0, 0.99), \vol, msg[3].asFloat.clip(0, 1)); msg2[0] = "rot"}
		{msg[1].asInteger == 1}{~whisper.xset(\vol, msg[3].asFloat.clip(0, 1), \speed, msg[2].asFloat.linlin(0, 1, 0, 2)); msg2[0] = "blau"}
		{msg[1].asInteger == 2}{~bee.xset(\vol, msg[3].asFloat.clip(0, 1), \freq, msg[2].asFloat.linlin(0, 1, 20, 6000)); msg2[0] = "gelb"}
		{msg[1].asInteger == 3}{~basstube.xset(\vol, msg[3].asFloat.clip(0, 1), \depth, msg[2].asFloat.linlin(0, 1, 0, 0.99)); msg2[0] = "grün"};

		msg2.postln;
	},
	'/params', recvPort:50000);


///////////// set up sound environment

// reset layers
~tube.clear; ~whisper.clear; ~bee.clear; ~basstube.clear;


// layer 0
////////// tube //////////////////////////////////////////////////////////////////////////////
z = (\0: [ 0.92792868614197, 0.91738927364349, 0.3681298494339, 0.33275127410889, 0.11782252788544, 0.25872349739075, 0.71423494815826, 0.50815784931183, 0.25440943241119, 0.91813158988953, 0.79196107387543, 0.60570335388184, 0.036342263221741, 0.25930821895599, 0.78361630439758, 0.7261209487915, 0.85304534435272, 0.64676475524902, 0.31532311439514, 0.54350757598877, 0.88698840141296, 0.62971031665802, 0.11904501914978, 0.091009855270386, 0.37420070171356, 0.16177725791931, 0.11832880973816, 0.71158695220947, 0.17374670505524, 0.23063981533051, 0.19178140163422, 0.78201413154602, 0.061564087867737, 0.12386739253998, 0.13575518131256, 0.12653148174286, 0.55945873260498, 0.69055640697479, 0.76092708110809, 0.14120602607727, 0.99306356906891, 0.79630327224731, 0.15569269657135, 0.57665538787842, 0.54338181018829, 0.71995949745178, 0.17975282669067, 0.64781808853149, 0.79616045951843, 0.12003469467163, 0.49640929698944, 0.2102118730545, 0.59820652008057, 0.25558412075043, 0.86879825592041, 0.47651970386505, 0.25282001495361, 0.72109889984131, 0.97296035289764, 0.012952923774719, 0.18266439437866, 0.69521164894104, 0.87726902961731, 0.33149456977844, 0.30259728431702, 0.76512491703033, 0.87193250656128, 0.64856433868408, 0.66639411449432, 0.21252155303955, 0.67718064785004, 0.65222108364105, 0.16461825370789, 0.89027535915375, 0.26526093482971, 0.83880686759949, 0.85694086551666, 0.41003918647766, 0.47052609920502, 0.23606514930725, 0.75846087932587, 0.62614154815674, 0.41089355945587, 0.80985200405121, 0.56106019020081, 0.092451572418213, 0.67852330207825, 0.52020704746246, 0.71218526363373, 0.48481893539429, 0.78405809402466, 0.3057119846344, 0.54408133029938, 0.26378989219666, 0.47069704532623, 0.68814969062805, 0.91554403305054, 0.40173411369324, 0.40871810913086 ], \1: [ 0.005698283803463, 0.0068281875252724, 0.0078623993635178, 0.0088508146286011, 0.0044545147299767, 0.009282100212574, 0.0053294021725655, 0.0085633377194405, 0.00058057074546814, 0.0076156065225601, 0.0072904785871506, 0.0020761802554131, 0.0090632172584534, 0.0011493912100792, 0.0091837529420853, 0.0048142724514008, 0.00023945266008377, 0.0077327433109283, 0.0054796427845955, 0.0044785914182663, 0.0035603420972824, 0.0020179765343666, 0.0078449410796165, 0.00098032921552658, 0.0063469570636749, 0.0049929563879967, 0.0054219866633415, 0.0092092222332954, 0.0033317345261574, 0.0032914080500603, 0.0029044603466988, 0.0095276408910751, 0.003362162899971, 0.0052763097763062, 0.0056665395379066, 0.0059243363022804, 0.0010841465830803, 0.0097956909894943, 0.0081768148779869, 0.0050573560118675, 0.0085368735432625, 0.0022760223150253, 0.0034051624655724, 0.0066921845078468, 0.0042727068781853, 0.0065459021925926, 0.0066366102099419, 0.0044707975625992, 0.0081964458584785, 0.009359972679615, 0.0016418014407158, 0.0021200684905052, 0.0024812070131302, 0.0070402302026749, 0.00023899593353271, 0.008739352107048, 0.0041938985347748, 0.0051932103276253, 0.0040165576338768, 0.0046968524217606, 0.009448360478878, 0.0082153911590576, 0.0014711485743523, 0.0066145504355431, 0.00016117775440216, 0.0048053456306458, 0.0077606756210327, 0.0041311865568161, 0.0032503368854523, 0.00038048084974289, 0.005207722902298, 0.0036371476888657, 0.0020652884483337, 0.0010892472863197, 0.0071701860189438, 0.0088352658629417, 0.0079076082110405, 0.0014341135978699, 0.0068792134404182, 0.0035830769300461, 0.0040456323504448, 0.003657247197628, 0.0032783081412315, 0.0094265107750893, 0.0028531747937202, 0.0077602448582649, 0.0019571445703506, 0.0075203619241714, 0.0043902201414108, 0.008902509701252, 0.0029236227989197, 0.0041272542238235, 0.0077711614489555, 0.0052912259697914, 0.0097795297145844, 0.0059602276921272, 0.0022906694293022, 0.0047651914596558, 0.0005240605711937, 0.0061516622066498 ]);

// loss 0..0.99, x0 0.01..0.5, freq 20..200
~tube[0] = {|vol=0, loss=0.99| LPF.ar(((Limiter.ar(NTube.ar(WhiteNoise.ar,loss,`(z[\0]),`(z[\1]) ),0.99,0.01).min(1.0).max(-1.0))*0.1).dup(2)*50, 10000)*vol*[0.8, 0.8, 0.8, 0.8, 0.8, 0.3, 0.3, 0.3]};
~tube[10] = \filter -> {|in, freq=200| HPF.ar(in, freq)};

~tube.play;


// layer 1
/////////// whisper //////////////////////////////////////////////////////////////////////////////

~whisper = {
	|buf = 10, speed=1, vol=0, trate, dur|

	trate = LFNoise0.kr(speed).range(0.3, 1.0);
	dur = 1.9 / trate;
	TGrains.ar(2, Impulse.kr(trate), buf,
		(1.2 ** WhiteNoise.kr(3).round(1)),
		LFNoise0.kr(5).range(0,BufDur.kr(buf)),
		dur,
		WhiteNoise.kr(0.6), 0.1)*vol
};
//~whisper[10] = \filter -> {|in| in * 2}

~whisper.play;


// layer 2
/////////// bee //////////////////////////////////////////////////////////////////////////////

~bee[0] = {b = LocalIn.ar(2);c=LFSaw.ar(b,0,b,1);d=c.range(0.25,4.0);a=PitchShift.ar(SinOscFB.ar(d*20,c),[0.05,0.03],d);5.do{a=a.tanh+(a*0.1)};LocalOut.ar(a); Out.ar(20, b!2)};
~bee[10] = {|vol=0, freq=6000| HPF.ar(In.ar(20, 2), freq)*vol };

~bee.play;
//~bee.xset(\freq, 1, \vol, 1)


// layer 3 //////////////////////////////////////////////////////////////////////////////
~basstube[0] = {|vol=0| LPF.ar(((Limiter.ar(NTube.ar(WhiteNoise.ar,0.97,`(z[\0]),`(z[\1]) ),0.99,0.01).min(1.0).max(-1.0))*0.1).dup(2)*50, 10000)*vol*[0.8, 0.8, 0.8, 0.8, 0.8, 0.3, 0.3, 0.3]};
~basstube[10] = \filter -> {|in, depth=0.99| LPF.ar(in, 200)*SinOsc.kr(1).range(depth, 1)};

~basstube.play;

//////////////////////////////////////////////////////////////////////////////


p.fadeTime = 4;

)











/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//////////////// workbench //////////////////////////////////////////////////////
// klankbell (bass version?), bassrumble, crackle, glitch, tube
// possible fx: filter, reverb, rhythm lfo
// tube, crackle, whisper, bass, bee, bassrumble
// tube, high texture?, chord?, crackle/glitch, whisper    , bee, kick/bassrumble?
//                                                   -------------[tube bass]
// chord?, kick für das Ende? wenn zu viel bass durch Basskomponente von tube ersetzen
// tube, whisper, bee, bassrumble (, glitch)

(
m = NetAddr("127.0.0.1", 50000);

m.sendMsg('/params', 3, 1, 0.5)

)


ProxySpace.pop
p = ProxySpace.push(s.boot);
m = ProxyMixer(p);
s.meter;

/////////// bee
(
~bee[0] = {b = LocalIn.ar(2);c=LFSaw.ar(b,0,b,1);d=c.range(0.25,4.0);a=PitchShift.ar(SinOscFB.ar(d*20,c),[0.05,0.03],d);5.do{a=a.tanh+(a*0.1)};LocalOut.ar(a); Out.ar(20, b!2)};
~bee[10] = {|vol=0, freq=8000| HPF.ar(In.ar(20, 2), freq)*vol };

~bee.play;

)
~bee.clear
~bee.xset(\freq, 1, \vol, 1)

/////////// whisper
(
s.sendMsg(\b_allocRead, 10, "/Users/marnin/Desktop/hackathon/git/droneboard/resources/whisper_swedish.wav");
//b = Buffer.read(s, "/Users/marnin/Desktop/hackathon/resources/whisper_swedish.wav");
)
(
~tesst[0] = {
	var buf = 10, trate, dur;

	trate = LFNoise0.kr(1).range(0.3, 1.0);
	dur = 1.9 / trate;
	TGrains.ar(2, Impulse.kr(trate), buf,
		(1.2 ** WhiteNoise.kr(3).round(1)),
		LFNoise0.kr(5).range(0,BufDur.kr(buf)),
		dur,
		WhiteNoise.kr(0.6), 0.1)*1
};
//~tesst[10] = \filter -> {|in| in * 2}

~tesst.play
)

~tesst.clear


///////// glitch

(
~glitch = {|vol=0, freq=180, thresh=0.89|
	var noie = LFNoise0.kr(180).cubed;
	var snd = SinOsc.ar(LFNoise0.ar(freq).range(12000, 20000))* (noie > thresh)*vol;
	var ampf = Amplitude.kr(snd, 0.1, 0.1);
	var trig = Trig.kr((ampf-0.01));
	SendReply.kr(Gate.kr(trig, Timer.kr(trig) > 0.01), '/ampf', [ampf]);

	Out.ar(TRand.ar(0, 1, trig).floor, snd) //change to 9?
};
~glitch.play
)

~glitch.set(\vol, 1)
~glitch.set(\thresh, 0.9)
~glitch.set(\freq, 200)
~glitch.clear

////////// tube
(
a = (\0: [ 0.92792868614197, 0.91738927364349, 0.3681298494339, 0.33275127410889, 0.11782252788544, 0.25872349739075, 0.71423494815826, 0.50815784931183, 0.25440943241119, 0.91813158988953, 0.79196107387543, 0.60570335388184, 0.036342263221741, 0.25930821895599, 0.78361630439758, 0.7261209487915, 0.85304534435272, 0.64676475524902, 0.31532311439514, 0.54350757598877, 0.88698840141296, 0.62971031665802, 0.11904501914978, 0.091009855270386, 0.37420070171356, 0.16177725791931, 0.11832880973816, 0.71158695220947, 0.17374670505524, 0.23063981533051, 0.19178140163422, 0.78201413154602, 0.061564087867737, 0.12386739253998, 0.13575518131256, 0.12653148174286, 0.55945873260498, 0.69055640697479, 0.76092708110809, 0.14120602607727, 0.99306356906891, 0.79630327224731, 0.15569269657135, 0.57665538787842, 0.54338181018829, 0.71995949745178, 0.17975282669067, 0.64781808853149, 0.79616045951843, 0.12003469467163, 0.49640929698944, 0.2102118730545, 0.59820652008057, 0.25558412075043, 0.86879825592041, 0.47651970386505, 0.25282001495361, 0.72109889984131, 0.97296035289764, 0.012952923774719, 0.18266439437866, 0.69521164894104, 0.87726902961731, 0.33149456977844, 0.30259728431702, 0.76512491703033, 0.87193250656128, 0.64856433868408, 0.66639411449432, 0.21252155303955, 0.67718064785004, 0.65222108364105, 0.16461825370789, 0.89027535915375, 0.26526093482971, 0.83880686759949, 0.85694086551666, 0.41003918647766, 0.47052609920502, 0.23606514930725, 0.75846087932587, 0.62614154815674, 0.41089355945587, 0.80985200405121, 0.56106019020081, 0.092451572418213, 0.67852330207825, 0.52020704746246, 0.71218526363373, 0.48481893539429, 0.78405809402466, 0.3057119846344, 0.54408133029938, 0.26378989219666, 0.47069704532623, 0.68814969062805, 0.91554403305054, 0.40173411369324, 0.40871810913086 ], \1: [ 0.005698283803463, 0.0068281875252724, 0.0078623993635178, 0.0088508146286011, 0.0044545147299767, 0.009282100212574, 0.0053294021725655, 0.0085633377194405, 0.00058057074546814, 0.0076156065225601, 0.0072904785871506, 0.0020761802554131, 0.0090632172584534, 0.0011493912100792, 0.0091837529420853, 0.0048142724514008, 0.00023945266008377, 0.0077327433109283, 0.0054796427845955, 0.0044785914182663, 0.0035603420972824, 0.0020179765343666, 0.0078449410796165, 0.00098032921552658, 0.0063469570636749, 0.0049929563879967, 0.0054219866633415, 0.0092092222332954, 0.0033317345261574, 0.0032914080500603, 0.0029044603466988, 0.0095276408910751, 0.003362162899971, 0.0052763097763062, 0.0056665395379066, 0.0059243363022804, 0.0010841465830803, 0.0097956909894943, 0.0081768148779869, 0.0050573560118675, 0.0085368735432625, 0.0022760223150253, 0.0034051624655724, 0.0066921845078468, 0.0042727068781853, 0.0065459021925926, 0.0066366102099419, 0.0044707975625992, 0.0081964458584785, 0.009359972679615, 0.0016418014407158, 0.0021200684905052, 0.0024812070131302, 0.0070402302026749, 0.00023899593353271, 0.008739352107048, 0.0041938985347748, 0.0051932103276253, 0.0040165576338768, 0.0046968524217606, 0.009448360478878, 0.0082153911590576, 0.0014711485743523, 0.0066145504355431, 0.00016117775440216, 0.0048053456306458, 0.0077606756210327, 0.0041311865568161, 0.0032503368854523, 0.00038048084974289, 0.005207722902298, 0.0036371476888657, 0.0020652884483337, 0.0010892472863197, 0.0071701860189438, 0.0088352658629417, 0.0079076082110405, 0.0014341135978699, 0.0068792134404182, 0.0035830769300461, 0.0040456323504448, 0.003657247197628, 0.0032783081412315, 0.0094265107750893, 0.0028531747937202, 0.0077602448582649, 0.0019571445703506, 0.0075203619241714, 0.0043902201414108, 0.008902509701252, 0.0029236227989197, 0.0041272542238235, 0.0077711614489555, 0.0052912259697914, 0.0097795297145844, 0.0059602276921272, 0.0022906694293022, 0.0047651914596558, 0.0005240605711937, 0.0061516622066498 ]);

// loss 0..0.99, x0 0.01..0.5, freq 20..200
~tube[0] = {|vol=0, loss=0.99| LPF.ar(((Limiter.ar(NTube.ar(WhiteNoise.ar,loss,`(a[\0]),`(a[\1]) ),0.99,0.01).min(1.0).max(-1.0))*0.1).dup(2)*50, 10000)*vol*[0.8, 0.8, 0.8, 0.8, 0.8, 0.3, 0.3, 0.3]};
~tube[10] = \filter -> {|in, freq=200| HPF.ar(in, freq)};

~tube.play
)
~tube.clear
~tube.set(\vol, 1)
~tube.set(\loss, 0.99)
~tube.set(\freq, 200)

////////////////////////////////////////////////// stuff
ProxySpace.pop
p = ProxySpace.push(s.boot);
m = ProxyMixer(p);
s.meter;

(
m.stop;

m = Task({

	{
		var time;
		time = 5.rand;
		{
			var sound, freqs, envs, rings, numvoices, env;
			numvoices = 24; //24
			freqs = {(Scale.dorian(\just).degrees+22+(0,12..84).choose).choose}.dup(numvoices).midicps;
			//freqs = {(Scale.major(\just).degrees+26+(0,12..110).choose).choose}.dup(numvoices).midicps;
			//freqs = {(Scale.choose(5,12).postln.tuning_(\just).degrees+66+(0,12..110).choose).choose}.dup(numvoices).midicps;

			rings = {1.0.rand}.dup(numvoices);
			envs = { EnvGen.kr(Env.linen( time/3.0.rand,
				time/3.0.rand, time/3.0.rand, 1.0.rand ) ) }.dup(numvoices);

			sound = PinkNoise.ar(numvoices.reciprocal!2);
			sound = DynKlank.ar(`[freqs,envs,rings], sound );
			//sound = sound * EnvGen.kr(Env.linen(time.rand,time/3,time.rand),doneAction:2);
			sound = sound * EnvGen.kr(Env.linen(time.rand,time,time),doneAction:2);

			sound = HPF.ar(sound, 120);

			//4.do{sound = DelayC.ar(sound, 0.4, [0.4.rand,0.4.rand], 1/8, sound) };

			Out.ar(11, sound*0.2)

		}.play;
		time.rand.wait;
	}.loop
});

m.start;

)
(
~router = {
	In.ar(11, 2)
};
//~router[10] = \filter -> {|in| HPF.ar(in, 7000)}
//~router[10] = nil
~router.play

)
m.stop
m.start
~router.clear;